// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Invoicing.Tests.Spec
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class GiftCardsAndCreditsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GiftCardsAndCredits.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Gift Cards and Credits", "In order to see what my payments are\r\nAs a customer\r\nI want to calculate a schedu" +
                    "le based off of my order", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Gift Cards and Credits")))
            {
                Invoicing.Tests.Spec.GiftCardsAndCreditsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Order with a gift card that exceeds the down payment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Gift Cards and Credits")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("LargeOrder")]
        public virtual void OrderWithAGiftCardThatExceedsTheDownPayment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order with a gift card that exceeds the down payment", new string[] {
                        "LargeOrder"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("an order with a variety of items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Credit Balance",
                        "Gift Card Balance",
                        "APR %",
                        "Number of Payments"});
            table1.AddRow(new string[] {
                        "$100.00",
                        "$1500.00",
                        "7.5%",
                        "36"});
#line 10
 testRunner.And("the following terms and balances", ((string)(null)), table1, "And ");
#line 13
 testRunner.When("I press calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Down Payment",
                        "Monthly Payment",
                        "Final Payment",
                        "Gift Card",
                        "Credit"});
            table2.AddRow(new string[] {
                        "$0.00",
                        "$511.36",
                        "$511.17",
                        "$0",
                        "$0"});
#line 14
 testRunner.Then("the resulting payment schedule should be", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Order with a credit that exceeds the down payment")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Gift Cards and Credits")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("LargeOrder")]
        public virtual void OrderWithACreditThatExceedsTheDownPayment()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order with a credit that exceeds the down payment", new string[] {
                        "LargeOrder"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("an order with a variety of items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Credit Balance",
                        "Gift Card Balance",
                        "APR %",
                        "Number of Payments"});
            table3.AddRow(new string[] {
                        "$1500.00",
                        "$100.00",
                        "7.5%",
                        "36"});
#line 26
 testRunner.And("the following terms and balances", ((string)(null)), table3, "And ");
#line 29
 testRunner.When("I press calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Down Payment",
                        "Monthly Payment",
                        "Final Payment",
                        "Gift Card",
                        "Credit"});
            table4.AddRow(new string[] {
                        "$0.00",
                        "$511.36",
                        "$511.17",
                        "$0",
                        "$0"});
#line 30
 testRunner.Then("the resulting payment schedule should be", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Order with a combined credit and gift card balance that exceeds the total invoice" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Gift Cards and Credits")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("LargeOrder")]
        public virtual void OrderWithACombinedCreditAndGiftCardBalanceThatExceedsTheTotalInvoice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order with a combined credit and gift card balance that exceeds the total invoice" +
                    "", new string[] {
                        "LargeOrder"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("an order with a variety of items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Credit Balance",
                        "Gift Card Balance",
                        "APR %",
                        "Number of Payments"});
            table5.AddRow(new string[] {
                        "$10000.00",
                        "$10000.00",
                        "7.5%",
                        "36"});
#line 37
 testRunner.And("the following terms and balances", ((string)(null)), table5, "And ");
#line 40
 testRunner.When("I press calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Down Payment",
                        "Monthly Payment",
                        "Final Payment",
                        "Gift Card",
                        "Credit"});
            table6.AddRow(new string[] {
                        "$0.00",
                        "$0.00",
                        "$0.00",
                        "$0.00",
                        "$12.50"});
#line 41
 testRunner.Then("the resulting payment schedule should be", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Order with a credit balance that exceeds the total invoice")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Gift Cards and Credits")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("LargeOrder")]
        public virtual void OrderWithACreditBalanceThatExceedsTheTotalInvoice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order with a credit balance that exceeds the total invoice", new string[] {
                        "LargeOrder"});
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("an order with a variety of items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Credit Balance",
                        "Gift Card Balance",
                        "APR %",
                        "Number of Payments"});
            table7.AddRow(new string[] {
                        "$21000.00",
                        "$1000.00",
                        "7.5%",
                        "36"});
#line 48
 testRunner.And("the following terms and balances", ((string)(null)), table7, "And ");
#line 51
 testRunner.When("I press calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Down Payment",
                        "Monthly Payment",
                        "Final Payment",
                        "Gift Card",
                        "Credit"});
            table8.AddRow(new string[] {
                        "$0.00",
                        "$0.00",
                        "$0.00",
                        "$0.00",
                        "$2012.50"});
#line 52
 testRunner.Then("the resulting payment schedule should be", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Order with a gift card balance that exceeds the total invoice")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Gift Cards and Credits")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.IgnoreAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("LargeOrder,")]
        public virtual void OrderWithAGiftCardBalanceThatExceedsTheTotalInvoice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order with a gift card balance that exceeds the total invoice", new string[] {
                        "LargeOrder,",
                        "ignore"});
#line 60
this.ScenarioSetup(scenarioInfo);
#line 61
 testRunner.Given("an order with a variety of items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Credit Balance",
                        "Gift Card Balance",
                        "APR %",
                        "Number of Payments"});
            table9.AddRow(new string[] {
                        "$1000.00",
                        "$21000.00",
                        "7.5%",
                        "36"});
#line 62
 testRunner.And("the following terms and balances", ((string)(null)), table9, "And ");
#line 65
 testRunner.When("I press calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Down Payment",
                        "Monthly Payment",
                        "Final Payment",
                        "Gift Card",
                        "Credit"});
            table10.AddRow(new string[] {
                        "$0.00",
                        "$0.00",
                        "$0.00",
                        "$2012.5",
                        "$0.00"});
#line 66
 testRunner.Then("the resulting payment schedule should be", ((string)(null)), table10, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
