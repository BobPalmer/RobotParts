// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Invoicing.Tests.Spec
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DiscountsAndDownPaymentsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DiscountsAndDownPayments.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Discounts and Down Payments", "In order to see what my payments are\r\nAs a customer\r\nI want to calculate a schedu" +
                    "le based off of my order", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Discounts and Down Payments")))
            {
                Invoicing.Tests.Spec.DiscountsAndDownPaymentsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Order with a single item, no discounts, credits, or gift cards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Discounts and Down Payments")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("customOrder")]
        public virtual void OrderWithASingleItemNoDiscountsCreditsOrGiftCards()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order with a single item, no discounts, credits, or gift cards", new string[] {
                        "customOrder"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Product",
                        "Price",
                        "Upfront %",
                        "Discount %",
                        "Quantity"});
            table1.AddRow(new string[] {
                        "Flexible whisker sensors",
                        "$100.00",
                        "0%",
                        "0%",
                        "100"});
#line 8
 testRunner.Given("an order with the following items", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Credit Balance",
                        "Gift Card Balance",
                        "APR %",
                        "Number of Payments"});
            table2.AddRow(new string[] {
                        "$0.00",
                        "$0.00",
                        "0%",
                        "10"});
#line 11
 testRunner.And("the following terms and balances", ((string)(null)), table2, "And ");
#line 14
 testRunner.When("I press calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Down Payment",
                        "Monthly Payment",
                        "Final Payment",
                        "Gift Card",
                        "Credit"});
            table3.AddRow(new string[] {
                        "$0",
                        "$1000.00",
                        "$1000.00",
                        "$0",
                        "$0"});
#line 15
 testRunner.Then("the resulting payment schedule should be", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Order with multiple items, no discounts, credits, or gift cards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Discounts and Down Payments")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("customOrder")]
        public virtual void OrderWithMultipleItemsNoDiscountsCreditsOrGiftCards()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order with multiple items, no discounts, credits, or gift cards", new string[] {
                        "customOrder"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Product",
                        "Price",
                        "Upfront %",
                        "Discount %",
                        "Quantity"});
            table4.AddRow(new string[] {
                        "Flexible whisker sensors",
                        "$100.00",
                        "0%",
                        "0%",
                        "100"});
            table4.AddRow(new string[] {
                        "Assorted Gears and Bearings",
                        "$50.00",
                        "0%",
                        "0%",
                        "100"});
#line 21
 testRunner.Given("an order with the following items", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Credit Balance",
                        "Gift Card Balance",
                        "APR %",
                        "Number of Payments"});
            table5.AddRow(new string[] {
                        "$0.00",
                        "$0.00",
                        "0%",
                        "10"});
#line 25
 testRunner.And("the following terms and balances", ((string)(null)), table5, "And ");
#line 28
 testRunner.When("I press calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Down Payment",
                        "Monthly Payment",
                        "Final Payment",
                        "Gift Card",
                        "Credit"});
            table6.AddRow(new string[] {
                        "$0",
                        "$1500.00",
                        "$1500.00",
                        "$0",
                        "$0"});
#line 29
 testRunner.Then("the resulting payment schedule should be", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Order with multiple items, discounts, credits, and gift cards")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Discounts and Down Payments")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("customOrder")]
        public virtual void OrderWithMultipleItemsDiscountsCreditsAndGiftCards()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order with multiple items, discounts, credits, and gift cards", new string[] {
                        "customOrder"});
#line 34
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Product",
                        "Price",
                        "Upfront %",
                        "Discount %",
                        "Quantity"});
            table7.AddRow(new string[] {
                        "Flexible whisker sensors",
                        "$100.00",
                        "0%",
                        "10%",
                        "100"});
            table7.AddRow(new string[] {
                        "Assorted Gears and Bearings",
                        "$50.00",
                        "0%",
                        "0%",
                        "100"});
            table7.AddRow(new string[] {
                        "Mountable Halogen Floodlights",
                        "100",
                        "10%",
                        "5%",
                        "50"});
#line 35
 testRunner.Given("an order with the following items", ((string)(null)), table7, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Credit Balance",
                        "Gift Card Balance",
                        "APR %",
                        "Number of Payments"});
            table8.AddRow(new string[] {
                        "$100.00",
                        "$50.00",
                        "7.5%",
                        "36"});
#line 41
 testRunner.And("the following terms and balances", ((string)(null)), table8, "And ");
#line 44
 testRunner.When("I press calculate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Down Payment",
                        "Monthly Payment",
                        "Final Payment",
                        "Gift Card",
                        "Credit"});
            table9.AddRow(new string[] {
                        "$349.75",
                        "$541.96",
                        "$541.69",
                        "$0",
                        "$0"});
#line 45
 testRunner.Then("the resulting payment schedule should be", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
